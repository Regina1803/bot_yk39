import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_GROUP_ID = int(os.getenv("SUPPORT_GROUP_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ù–∞—á–∞—Ç—å"))
city_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"),
    KeyboardButton("–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    KeyboardButton("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
)
role_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–§–∏–∑ –ª–∏—Ü–æ"),
    KeyboardButton("–Æ—Ä –ª–∏—Ü–æ")
)
contact_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–í —á–∞—Ç–µ"),
    KeyboardButton("–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
)
confirm_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞"),
    KeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É")
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=start_kb)

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å")
async def ask_city(message: types.Message):
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=city_kb)

@dp.message_handler(lambda message: message.text in ["–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"])
async def ask_role(message: types.Message):
    user_data[message.from_user.id] = {"city": message.text}
    await message.answer("–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?", reply_markup=role_kb)

@dp.message_handler(lambda message: message.text in ["–§–∏–∑ –ª–∏—Ü–æ", "–Æ—Ä –ª–∏—Ü–æ"])
async def ask_contact_method(message: types.Message):
    user_data[message.from_user.id]["role"] = message.text
    await message.answer("–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?", reply_markup=contact_kb)

@dp.message_handler(lambda message: message.text in ["–í —á–∞—Ç–µ", "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"])
async def ask_name(message: types.Message):
    user_data[message.from_user.id]["contact_method"] = message.text
    if user_data[message.from_user.id]["role"] == "–Æ—Ä –ª–∏—Ü–æ":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    else:
        await message.answer("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

@dp.message_handler(lambda message: message.from_user.id in user_data and "name" not in user_data[message.from_user.id])
async def ask_query(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å.")

@dp.message_handler(lambda message: message.from_user.id in user_data and "query" not in user_data[message.from_user.id])
async def ask_phone(message: types.Message):
    user_data[message.from_user.id]["query"] = message.text
    if user_data[message.from_user.id]["contact_method"] == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    else:
        await confirm_contact(message)

@dp.message_handler(lambda message: message.from_user.id in user_data and "phone" not in user_data[message.from_user.id])
async def confirm_contact(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    user_info = user_data[message.from_user.id]
    phone = user_info["phone"] if user_info["contact_method"] == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É" else "‚Äî"  # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ —á–∞—Ç, —Å—Ç–∞–≤–∏–º –ø—Ä–æ—á–µ—Ä–∫
    msg = (f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
           f"üèô –ì–æ—Ä–æ–¥: {user_info['city']}\n"
           f"üë§ –°—Ç–∞—Ç—É—Å: {user_info['role']}\n"
           f"üìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {user_info['contact_method']}\n"
           f"üìõ –ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è: {user_info['name']}\n"
           f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
           f"üí¨ –ó–∞–ø—Ä–æ—Å: {user_info['query']}\n"
           f"üÜî User ID: {message.from_user.id}")

    if SUPPORT_GROUP_ID:
        await bot.send_message(SUPPORT_GROUP_ID, msg)

    if user_info["contact_method"] == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer(
            "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∂–¥–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É'",
            reply_markup=confirm_kb
        )
    else:
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ.")

@dp.message_handler(lambda message: message.text in ["–ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞", "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É"])
async def final_step(message: types.Message):
    user_info = user_data.get(message.from_user.id)
    if user_info and user_info["contact_method"] == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        if message.text == "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É":
            await message.answer("–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É: +7 (911) 458-39-39")
        else:
            await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    else:
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ.")

@dp.message_handler(commands=['reply'])
async def reply_to_user(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply user_id —Ç–µ–∫—Å—Ç")
        return
    user_id = args[1]
    response_text = " ".join(args[2:])
    try:
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {response_text}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
